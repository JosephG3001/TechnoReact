[{"C:\\GIT Projects\\TechnoReact\\src\\index.tsx":"1","C:\\GIT Projects\\TechnoReact\\src\\serviceWorker.ts":"2","C:\\GIT Projects\\TechnoReact\\src\\App.tsx":"3","C:\\GIT Projects\\TechnoReact\\src\\redux\\userManager.ts":"4","C:\\GIT Projects\\TechnoReact\\src\\techno.config.ts":"5","C:\\GIT Projects\\TechnoReact\\src\\redux\\reducers\\articles.reducer.ts":"6","C:\\GIT Projects\\TechnoReact\\src\\redux\\reducers\\article.reducer.ts":"7","C:\\GIT Projects\\TechnoReact\\src\\redux\\reducers\\news.reducer.ts":"8","C:\\GIT Projects\\TechnoReact\\src\\redux\\reducers\\sections.reducer.ts":"9","C:\\GIT Projects\\TechnoReact\\src\\components\\callback-page.tsx":"10","C:\\GIT Projects\\TechnoReact\\src\\components\\login-page.tsx":"11","C:\\GIT Projects\\TechnoReact\\src\\components\\silent-renew-page.tsx":"12","C:\\GIT Projects\\TechnoReact\\src\\components\\article\\article.tsx":"13","C:\\GIT Projects\\TechnoReact\\src\\components\\article\\articles.tsx":"14","C:\\GIT Projects\\TechnoReact\\src\\components\\landing-page\\landing-page.tsx":"15","C:\\GIT Projects\\TechnoReact\\src\\tools\\url-helper.ts":"16","C:\\GIT Projects\\TechnoReact\\src\\components\\news\\news.tsx":"17","C:\\GIT Projects\\TechnoReact\\src\\components\\particles\\particles-wrapper.tsx":"18","C:\\GIT Projects\\TechnoReact\\src\\api\\article-service.ts":"19","C:\\GIT Projects\\TechnoReact\\src\\api\\news-service.ts":"20","C:\\GIT Projects\\TechnoReact\\src\\components\\top-nav\\top-nav.tsx":"21","C:\\GIT Projects\\TechnoReact\\src\\tools\\toast.ts":"22","C:\\GIT Projects\\TechnoReact\\src\\api\\apiUtils.ts":"23","C:\\GIT Projects\\TechnoReact\\src\\api\\sections-service.ts":"24","C:\\GIT Projects\\TechnoReact\\src\\redux\\store.ts":"25","C:\\GIT Projects\\TechnoReact\\src\\components\\not-found\\my-404-page.tsx":"26","C:\\GIT Projects\\TechnoReact\\src\\redux\\reducers\\error.reducer.ts":"27","C:\\GIT Projects\\TechnoReact\\src\\components\\error-page\\error-page.tsx":"28","C:\\GIT Projects\\TechnoReact\\src\\redux\\reducers\\user.reducer.ts":"29","C:\\GIT Projects\\TechnoReact\\src\\layouts\\cms\\cms-layout.tsx":"30","C:\\GIT Projects\\TechnoReact\\src\\layouts\\public\\public-layout.tsx":"31","C:\\GIT Projects\\TechnoReact\\src\\layouts\\public\\public-sidebar\\public-sidebar.tsx":"32","C:\\GIT Projects\\TechnoReact\\src\\layouts\\public\\public-sidebar\\public-sidebar-items.tsx":"33","C:\\GIT Projects\\TechnoReact\\src\\layouts\\public\\public-sidebar\\public-sidebar-item.tsx":"34","C:\\GIT Projects\\TechnoReact\\src\\layouts\\cms\\cms-sidebar\\cms-sidebar.tsx":"35","C:\\GIT Projects\\TechnoReact\\src\\styles\\theme.ts":"36","C:\\GIT Projects\\TechnoReact\\src\\styles\\index.ts":"37","C:\\GIT Projects\\TechnoReact\\src\\components\\cms\\content-explorer.tsx":"38","C:\\GIT Projects\\TechnoReact\\src\\components\\cms\\section-menuitem.tsx":"39","C:\\GIT Projects\\TechnoReact\\src\\components\\cms\\content-editor.tsx":"40","C:\\GIT Projects\\TechnoReact\\src\\components\\loading-spinner.tsx":"41","C:\\GIT Projects\\TechnoReact\\src\\hocs\\withModal.tsx":"42","C:\\GIT Projects\\TechnoReact\\src\\hocs\\withSidebar.tsx":"43","C:\\GIT Projects\\TechnoReact\\src\\components\\backgroundImage.tsx":"44","C:\\GIT Projects\\TechnoReact\\src\\components\\loading-page.tsx":"45","C:\\GIT Projects\\TechnoReact\\src\\components\\error-triangle.tsx":"46","C:\\GIT Projects\\TechnoReact\\src\\tools\\nameof.ts":"47","C:\\GIT Projects\\TechnoReact\\src\\inputs\\input-textbox.tsx":"48","C:\\GIT Projects\\TechnoReact\\src\\inputs\\techno-button.tsx":"49","C:\\GIT Projects\\TechnoReact\\src\\classes\\transaction-result.ts":"50","C:\\GIT Projects\\TechnoReact\\src\\classes\\section.ts":"51","C:\\GIT Projects\\TechnoReact\\src\\tools\\formUtils.ts":"52","C:\\GIT Projects\\TechnoReact\\src\\components\\cms\\add-edit-section-modal.tsx":"53","C:\\GIT Projects\\TechnoReact\\src\\components\\cms\\delete-section-modal.tsx":"54","C:\\GIT Projects\\TechnoReact\\src\\inputs\\input-single-select.tsx":"55","C:\\GIT Projects\\TechnoReact\\src\\inputs\\input-richtext-editor.tsx":"56"},{"size":1152,"mtime":1625270647698,"results":"57","hashOfConfig":"58"},{"size":5301,"mtime":1616281117944,"results":"59","hashOfConfig":"58"},{"size":1251,"mtime":1625308711729,"results":"60","hashOfConfig":"58"},{"size":2760,"mtime":1625524763244,"results":"61","hashOfConfig":"58"},{"size":399,"mtime":1616281096244,"results":"62","hashOfConfig":"58"},{"size":1268,"mtime":1616803920631,"results":"63","hashOfConfig":"58"},{"size":2060,"mtime":1625477310208,"results":"64","hashOfConfig":"58"},{"size":1587,"mtime":1616931772666,"results":"65","hashOfConfig":"58"},{"size":5370,"mtime":1625439478046,"results":"66","hashOfConfig":"58"},{"size":1966,"mtime":1625089742067,"results":"67","hashOfConfig":"58"},{"size":706,"mtime":1625308648725,"results":"68","hashOfConfig":"58"},{"size":222,"mtime":1616887057267,"results":"69","hashOfConfig":"58"},{"size":2927,"mtime":1624751427549,"results":"70","hashOfConfig":"58"},{"size":4618,"mtime":1625091087418,"results":"71","hashOfConfig":"58"},{"size":731,"mtime":1616965488623,"results":"72","hashOfConfig":"58"},{"size":3363,"mtime":1616879202000,"results":"73","hashOfConfig":"58"},{"size":2288,"mtime":1625091043305,"results":"74","hashOfConfig":"58"},{"size":1488,"mtime":1616280914724,"results":"75","hashOfConfig":"76"},{"size":841,"mtime":1625437012186,"results":"77","hashOfConfig":"58"},{"size":612,"mtime":1616286647630,"results":"78","hashOfConfig":"58"},{"size":3784,"mtime":1624829226880,"results":"79","hashOfConfig":"58"},{"size":672,"mtime":1625357759489,"results":"80","hashOfConfig":"58"},{"size":4951,"mtime":1625437121682,"results":"81","hashOfConfig":"58"},{"size":805,"mtime":1625357585934,"results":"82","hashOfConfig":"58"},{"size":1561,"mtime":1625436234412,"results":"83","hashOfConfig":"58"},{"size":745,"mtime":1616966618424,"results":"84","hashOfConfig":"58"},{"size":532,"mtime":1616630283201,"results":"85","hashOfConfig":"58"},{"size":1269,"mtime":1625012518156,"results":"86","hashOfConfig":"58"},{"size":1054,"mtime":1616939814826,"results":"87","hashOfConfig":"58"},{"size":2033,"mtime":1625308653678,"results":"88","hashOfConfig":"58"},{"size":1446,"mtime":1624830731112,"results":"89","hashOfConfig":"58"},{"size":517,"mtime":1618525436548,"results":"90","hashOfConfig":"58"},{"size":2596,"mtime":1625091139529,"results":"91","hashOfConfig":"58"},{"size":3333,"mtime":1625352041143,"results":"92","hashOfConfig":"58"},{"size":3016,"mtime":1624830900695,"results":"93","hashOfConfig":"58"},{"size":2151,"mtime":1625489825634,"results":"94","hashOfConfig":"58"},{"size":2565,"mtime":1625271050170,"results":"95","hashOfConfig":"58"},{"size":3625,"mtime":1625521762686,"results":"96","hashOfConfig":"58"},{"size":7901,"mtime":1625436589479,"results":"97","hashOfConfig":"58"},{"size":4672,"mtime":1625526117053,"results":"98","hashOfConfig":"58"},{"size":1245,"mtime":1625096540860,"results":"99","hashOfConfig":"58"},{"size":1416,"mtime":1625180531819,"results":"100","hashOfConfig":"58"},{"size":2109,"mtime":1624800505471,"results":"101","hashOfConfig":"58"},{"size":667,"mtime":1624748249603,"results":"102","hashOfConfig":"58"},{"size":652,"mtime":1625090185690,"results":"103","hashOfConfig":"58"},{"size":704,"mtime":1625091046618,"results":"104","hashOfConfig":"58"},{"size":92,"mtime":1617642825791,"results":"105","hashOfConfig":"58"},{"size":1742,"mtime":1625490255658,"results":"106","hashOfConfig":"58"},{"size":965,"mtime":1625272097296,"results":"107","hashOfConfig":"58"},{"size":482,"mtime":1625263675841,"results":"108","hashOfConfig":"58"},{"size":367,"mtime":1625351857615,"results":"109","hashOfConfig":"58"},{"size":710,"mtime":1625352591248,"results":"110","hashOfConfig":"58"},{"size":5037,"mtime":1625490198962,"results":"111","hashOfConfig":"58"},{"size":1360,"mtime":1625411864009,"results":"112","hashOfConfig":"58"},{"size":3376,"mtime":1625490101679,"results":"113","hashOfConfig":"58"},{"size":1650,"mtime":1625615102879,"results":"114","hashOfConfig":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},"h7tcj0",{"filePath":"118","messages":"119","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"117"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"117"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},"46tv1m",{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"117"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"117"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"117"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"232","messages":"233","errorCount":3,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\GIT Projects\\TechnoReact\\src\\index.tsx",[],["234","235","236","237","238"],"C:\\GIT Projects\\TechnoReact\\src\\serviceWorker.ts",["239","240","241","242","243"],"/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable prettier/prettier */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","C:\\GIT Projects\\TechnoReact\\src\\App.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\redux\\userManager.ts",["244","245","246","247","248"],"/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { User, UserManager, UserManagerSettings } from \"oidc-client\";\r\nimport { createUserManager } from \"redux-oidc\";\r\nimport { Global } from \"../techno.config\";\r\n// import { UserActionTypes, INewAccessTokenActionType, INoTokenActionType } from '../redux/actions/userActions';\r\n// import { TeamsStore, buildTeamStore } from '../userState/teams';\r\n\r\nexport interface IAccessToken {\r\n  nbf: number;\r\n  exp: number;\r\n  iss: string;\r\n  aud: string[];\r\n  // eslint-disable-next-line camelcase\r\n  client_id: string;\r\n  sub: string;\r\n  // eslint-disable-next-line camelcase\r\n  auth_time: number;\r\n  idp: string;\r\n  permissions: string[];\r\n  teams: string[];\r\n  roles: string;\r\n  scope: string[];\r\n  amr: string[];\r\n}\r\n\r\nconst userManagerConfig: UserManagerSettings = {\r\n  client_id: \"reactSpa\",\r\n  redirect_uri: `${Global.spaUrl}/callback`,\r\n  response_type: \"code\",\r\n  scope: \"openid profile contentapi newsapi offline_access\",\r\n  authority: Global.identityUrl,\r\n  // silent_redirect_uri: `${Global.spaUrl}/silentrenew`,\r\n  automaticSilentRenew: true,\r\n  filterProtocolClaims: true,\r\n  loadUserInfo: true,\r\n  monitorSession: false,\r\n  includeIdTokenInSilentRenew: false,\r\n};\r\n\r\nconst updateAccessToken = (userManager: UserManager) => {\r\n  userManager.getUser().then((user: User | null) => {\r\n    if (user) {\r\n      // usersCurrentStoredToken = user.access_token;\r\n      // const tokenObj: IAccessToken = JWT.default(user.access_token);\r\n      // const teamsStore: TeamsStore = buildTeamStore(tokenObj);\r\n      // store.dispatch(newUserActionType);\r\n    } else {\r\n      // const noTokenAction:INoTokenActionType = {\r\n      //  type: UserActionTypes.NO_TOKEN,\r\n      // }\r\n      // store.dispatch(noTokenAction);\r\n    }\r\n  });\r\n};\r\n\r\nconst createManager = () => {\r\n  const localUserManager = createUserManager(userManagerConfig);\r\n\r\n  localUserManager.events.addUserSignedOut(() => {\r\n    console.log(\"addUserSignedOut\");\r\n    localUserManager.signinRedirect({\r\n      data: {\r\n        path: process.env.WEB_URL,\r\n      },\r\n    });\r\n  });\r\n\r\n  localUserManager.events.addSilentRenewError((error) => {\r\n    console.error(\"Error while renewing the access token\", error);\r\n  });\r\n\r\n  localUserManager.events.addAccessTokenExpiring((event: any) => {\r\n    console.log(\"Access Token Expiring\");\r\n  });\r\n\r\n  localUserManager.events.addAccessTokenExpired((event: any) => {\r\n    console.error(\"Access Token Expired\");\r\n  });\r\n\r\n  localUserManager.events.addUserLoaded((event: any) => {\r\n    console.log(\"User loaded / Silent refresh completed\");\r\n    updateAccessToken(localUserManager);\r\n  });\r\n\r\n  return localUserManager;\r\n};\r\n\r\nexport const userManager: UserManager = createManager();\r\n\r\nexport default userManager;\r\n","C:\\GIT Projects\\TechnoReact\\src\\techno.config.ts",[],"C:\\GIT Projects\\TechnoReact\\src\\redux\\reducers\\articles.reducer.ts",[],"C:\\GIT Projects\\TechnoReact\\src\\redux\\reducers\\article.reducer.ts",[],"C:\\GIT Projects\\TechnoReact\\src\\redux\\reducers\\news.reducer.ts",[],"C:\\GIT Projects\\TechnoReact\\src\\redux\\reducers\\sections.reducer.ts",[],"C:\\GIT Projects\\TechnoReact\\src\\components\\callback-page.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\components\\login-page.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\components\\silent-renew-page.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\components\\article\\article.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\components\\article\\articles.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\components\\landing-page\\landing-page.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\tools\\url-helper.ts",[],"C:\\GIT Projects\\TechnoReact\\src\\components\\news\\news.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\components\\particles\\particles-wrapper.tsx",[],["249","250","251","252","253"],"C:\\GIT Projects\\TechnoReact\\src\\api\\article-service.ts",[],"C:\\GIT Projects\\TechnoReact\\src\\api\\news-service.ts",[],"C:\\GIT Projects\\TechnoReact\\src\\components\\top-nav\\top-nav.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\tools\\toast.ts",[],"C:\\GIT Projects\\TechnoReact\\src\\api\\apiUtils.ts",["254","255","256","257"],"import { User } from \"oidc-client\";\r\nimport TransactionError from \"../classes/transaction-error\";\r\nimport TransactionResult from \"../classes/transaction-result\";\r\nimport userManager from \"../redux/userManager\";\r\nimport { Global } from \"../techno.config\";\r\n\r\nexport function getHeaderWithAuthorization(): Promise<Headers> {\r\n  return userManager.getUser().then((user: User | null) => {\r\n    const headers = new Headers();\r\n    headers.append(\"Accept\", \"application/json\");\r\n    headers.append(\"content-type\", \"application/json\");\r\n    headers.append(\"Origin\", Global.identityUrl);\r\n    if (user) {\r\n      headers.append(\"Authorization\", `Bearer ${user.access_token}`);\r\n    }\r\n\r\n    return headers;\r\n  });\r\n}\r\n\r\n// export function getHeaders(token: string): Array<Object>{\r\n//   return [\r\n//       {'Accept': 'application/json'},\r\n//       {\"content-type\": \"application/json\"},\r\n//       {\"Authorization\": \"Bearer \" + token}\r\n//   ]\r\n// }\r\n\r\nexport function genericGet<TResult>(url: string): Promise<TResult> {\r\n  return fetch(url)\r\n    .then((response: Response) => {\r\n      if (response.status === 404 || response.status === 401) {\r\n        // NotFound was returned from C# so handle null object in your calling function\r\n        // return null;\r\n      }\r\n      const result = response.json();\r\n      return result;\r\n    })\r\n    .then((data: TResult) => {\r\n      return data;\r\n    });\r\n}\r\n\r\nexport const genericGetAuth = <TResult>(url: string): Promise<TResult> => {\r\n  return getHeaderWithAuthorization().then((headers: Headers) => {\r\n    return fetch(url, {\r\n      headers,\r\n    })\r\n      .then((response: Response) => {\r\n        if (response.status === 404 || response.status === 401) {\r\n          // NotFound was returned from C# so handle null object in your calling function\r\n          return null;\r\n        }\r\n        const result = response.json();\r\n        return result;\r\n      })\r\n      .then((data: TResult) => {\r\n        return data;\r\n      })\r\n      .catch((err: any) => {\r\n        console.log(`Could not connect to back end: ${err}`);\r\n        throw err;\r\n      });\r\n  });\r\n};\r\n\r\nexport const genericPost = <TPostData, TResult>(\r\n  url: string,\r\n  data: TPostData\r\n): Promise<TransactionResult<TResult>> => {\r\n  return getHeaderWithAuthorization().then((headers: Headers) => {\r\n    const tResult = new TransactionResult<TResult>();\r\n    const content = JSON.stringify(data);\r\n    return fetch(url, {\r\n      headers,\r\n      method: \"POST\",\r\n      body: content,\r\n    })\r\n      .then((response) => {\r\n        // 400 (bad request) here\r\n        if (response.status === 400) {\r\n          return response.json().then((r: Array<TransactionError>) => {\r\n            tResult.success = false;\r\n            tResult.error = r;\r\n            return tResult;\r\n          });\r\n        }\r\n\r\n        return response.json().then((r: TResult) => {\r\n          tResult.success = true;\r\n          tResult.model = r;\r\n          return tResult;\r\n        });\r\n      })\r\n      .catch((err: any) => {\r\n        // 500 (internal server error) here\r\n        console.log(`Could not connect to back end: ${err}`);\r\n        throw err;\r\n      });\r\n  });\r\n};\r\n\r\nexport const genericPut = <TPostData>(\r\n  url: string,\r\n  data: TPostData\r\n): Promise<TransactionResult<TPostData>> => {\r\n  return getHeaderWithAuthorization().then((headers: Headers) => {\r\n    const tResult = new TransactionResult<TPostData>();\r\n    const content = JSON.stringify(data);\r\n    return fetch(url, {\r\n      headers,\r\n      method: \"PUT\",\r\n      body: content,\r\n    })\r\n      .then((response) => {\r\n        // 400 (bad request) here\r\n        if (response.status === 400) {\r\n          return response.json().then((r: Array<TransactionError>) => {\r\n            tResult.success = false;\r\n            tResult.error = r;\r\n            return tResult;\r\n          });\r\n        }\r\n        tResult.success = true;\r\n        tResult.model = data;\r\n        return tResult;\r\n      })\r\n      .catch((err: any) => {\r\n        // 500 (internal server error) here\r\n        console.log(`Could not connect to back end: ${err}`);\r\n        throw err;\r\n      });\r\n  });\r\n};\r\n\r\nexport const genericDelete = (\r\n  url: string\r\n): Promise<TransactionResult<undefined>> => {\r\n  return getHeaderWithAuthorization().then((headers: Headers) => {\r\n    const tResult = new TransactionResult<undefined>();\r\n    return fetch(url, {\r\n      headers,\r\n      method: \"DELETE\",\r\n    })\r\n      .then((response) => {\r\n        // 400 (bad request) here\r\n        if (response.status === 400) {\r\n          return response.json().then((r: Array<TransactionError>) => {\r\n            tResult.success = false;\r\n            tResult.error = r;\r\n            return tResult;\r\n          });\r\n        }\r\n        tResult.success = true;\r\n        return tResult;\r\n      })\r\n      .catch((err: any) => {\r\n        // 500 (internal server error) here\r\n        console.log(`Could not connect to back end: ${err}`);\r\n        throw err;\r\n      });\r\n  });\r\n};\r\n","C:\\GIT Projects\\TechnoReact\\src\\api\\sections-service.ts",[],"C:\\GIT Projects\\TechnoReact\\src\\redux\\store.ts",[],"C:\\GIT Projects\\TechnoReact\\src\\components\\not-found\\my-404-page.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\redux\\reducers\\error.reducer.ts",[],"C:\\GIT Projects\\TechnoReact\\src\\components\\error-page\\error-page.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\redux\\reducers\\user.reducer.ts",[],"C:\\GIT Projects\\TechnoReact\\src\\layouts\\cms\\cms-layout.tsx",["258"],"import { User } from \"oidc-client\";\r\nimport React, { FC, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport BackgroundImage from \"../../components/backgroundImage\";\r\nimport ContentExplorer from \"../../components/cms/content-explorer\";\r\nimport LoadingPage from \"../../components/loading-page\";\r\nimport TopNav from \"../../components/top-nav/top-nav\";\r\nimport { AppState } from \"../../redux/store\";\r\nimport userManager from \"../../redux/userManager\";\r\nimport CMSSidebar from \"./cms-sidebar/cms-sidebar\";\r\n\r\nconst CMSLayout: FC = () => {\r\n  const dispatch = useDispatch();\r\n  const loggedIn = useSelector(\r\n    (state: AppState) => state.oidcState.user && !state.oidcState.isLoadingUser\r\n  );\r\n\r\n  useEffect(() => {\r\n    userManager.getUser().then((user: User | null) => {\r\n      if (user === null) {\r\n        console.log(\"Redirecting to login....\");\r\n        userManager.signinRedirect({\r\n          state: {\r\n            path: window.location.pathname,\r\n          },\r\n        });\r\n      } else {\r\n        userManager.signinSilent().catch((error: Error) => {\r\n          if (error.message.indexOf(\"login_required\") !== -1) {\r\n            userManager.signinRedirect({\r\n              state: {\r\n                path: window.location.pathname,\r\n              },\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }, [dispatch, loggedIn]);\r\n\r\n  return (\r\n    <>\r\n      {loggedIn ? (\r\n        <div className=\"App\">\r\n          <BackgroundImage />\r\n          <TopNav />\r\n          <CMSSidebar />\r\n          <header className=\"App-header\" />\r\n          <div className=\"root-content\">\r\n            <Switch>\r\n              <Route exact path=\"/cms/content\" component={ContentExplorer} />\r\n              <Redirect from=\"/cms\" to=\"/cms/content\" />\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <LoadingPage labelText=\"Redirecting to login...\" />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CMSLayout;\r\n","C:\\GIT Projects\\TechnoReact\\src\\layouts\\public\\public-layout.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\layouts\\public\\public-sidebar\\public-sidebar.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\layouts\\public\\public-sidebar\\public-sidebar-items.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\layouts\\public\\public-sidebar\\public-sidebar-item.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\layouts\\cms\\cms-sidebar\\cms-sidebar.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\styles\\theme.ts",[],"C:\\GIT Projects\\TechnoReact\\src\\styles\\index.ts",[],"C:\\GIT Projects\\TechnoReact\\src\\components\\cms\\content-explorer.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\components\\cms\\section-menuitem.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\components\\cms\\content-editor.tsx",["259"],"import React, { useEffect, useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport ArticleEntity from \"../../classes/article-entity\";\nimport Section from \"../../classes/section\";\nimport InputRichtextEditor from \"../../inputs/input-richtext-editor\";\nimport InputSingleSelect from \"../../inputs/input-single-select\";\nimport InputTextBox from \"../../inputs/input-textbox\";\nimport TechnoButton from \"../../inputs/techno-button\";\nimport {\n  selectSection,\n  selectSections,\n} from \"../../redux/reducers/sections.reducer\";\nimport nameof from \"../../tools/nameof\";\n\nconst StyledContentEditor = styled.div`\n  display: flex;\n  flex: 1;\n\n  form {\n    display: flex;\n    flex-direction: column;\n    justify-content: stretch;\n    flex: 1;\n  }\n\n  .article-form-controls {\n    flex: 0;\n  }\n\n  .article-content-wrapper {\n    flex: 1;\n    .ck-editor__editable {\n      height: calc(100vh - 328px);\n    }\n  }\n\n  .article-footer-buttons {\n    flex: 0;\n    display: flex;\n    justify-content: flex-end;\n\n    button {\n      margin-left: 15px;\n    }\n  }\n`;\n\ninterface IContentEditorProps {\n  articleForEdit: ArticleEntity;\n}\n\nconst ContentEditor: React.FC<IContentEditorProps> = ({ articleForEdit }) => {\n  const section = useSelector(selectSection(articleForEdit?.sectionId));\n  const techs = useSelector(selectSections);\n\n  const [tech, setTech] = useState<Section>();\n\n  useEffect(() => {\n    if (section) {\n      setTech(techs.find((t) => t.sectionId === section.parentSectionId));\n    }\n  }, [section, techs]);\n\n  const form = useForm<ArticleEntity>({\n    defaultValues: articleForEdit,\n  });\n\n  const { handleSubmit, clearErrors, setValue, register } = form;\n\n  const onSubmit = (data: ArticleEntity) => {\n    console.log(data);\n  };\n\n  return (\n    <StyledContentEditor>\n      <FormProvider {...form}>\n        <form\n          onSubmit={(e) => {\n            clearErrors();\n            handleSubmit(onSubmit)(e);\n          }}\n        >\n          <div className=\"article-form-controls row\">\n            <div className=\"col-4\">\n              {tech && (\n                <InputSingleSelect\n                  label=\"Tech\"\n                  name=\"Tech\"\n                  items={techs}\n                  value={tech.sectionId}\n                  textProperty={nameof<Section>(\"sectionName\")}\n                  valueProperty={nameof<Section>(\"sectionId\")}\n                  onChange={(value: string) => {\n                    const localTech = techs.find((t) => t.sectionId === value);\n                    setTech(localTech);\n                    setValue(\n                      \"sectionId\",\n                      localTech?.inverseParentSection[0]?.sectionId\n                    );\n                  }}\n                />\n              )}\n            </div>\n            <div className=\"col-4\">\n              <Controller\n                name={nameof<ArticleEntity>(\"sectionId\")}\n                render={({ name, onChange, value }) => (\n                  <InputSingleSelect\n                    label=\"Section\"\n                    name={name}\n                    items={tech?.inverseParentSection || []}\n                    value={value}\n                    textProperty={nameof<Section>(\"sectionName\")}\n                    valueProperty={nameof<Section>(\"sectionId\")}\n                    onChange={onChange}\n                  />\n                )}\n              />\n            </div>\n            <div className=\"col-4\">\n              <InputTextBox\n                ref={register}\n                label=\"Article Name *\"\n                name={nameof<ArticleEntity>(\"articleName\")}\n              />\n            </div>\n          </div>\n          <div className=\"article-content-wrapper\">\n            <Controller\n              defaultValue={articleForEdit.articleHtml}\n              name={nameof<ArticleEntity>(\"articleHtml\")}\n              render={({ name, onChange, value }) => (\n                <InputRichtextEditor\n                  value={value}\n                  name={name}\n                  onChange={onChange}\n                />\n              )}\n            />\n          </div>\n          <div className=\"article-footer-buttons\">\n            <TechnoButton\n              materialIcon=\"close\"\n              text=\"Cancel\"\n              onClick={() => {}}\n            />\n            <TechnoButton\n              materialIcon=\"save\"\n              isSubmitButton\n              text={`${articleForEdit.articleId ? \"Update\" : \"Save\"} Article`}\n            />\n          </div>\n        </form>\n      </FormProvider>\n    </StyledContentEditor>\n  );\n};\n\nexport default ContentEditor;\n","C:\\GIT Projects\\TechnoReact\\src\\components\\loading-spinner.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\hocs\\withModal.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\hocs\\withSidebar.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\components\\backgroundImage.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\components\\loading-page.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\components\\error-triangle.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\tools\\nameof.ts",[],"C:\\GIT Projects\\TechnoReact\\src\\inputs\\input-textbox.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\inputs\\techno-button.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\classes\\transaction-result.ts",[],"C:\\GIT Projects\\TechnoReact\\src\\classes\\section.ts",[],"C:\\GIT Projects\\TechnoReact\\src\\tools\\formUtils.ts",[],"C:\\GIT Projects\\TechnoReact\\src\\components\\cms\\add-edit-section-modal.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\components\\cms\\delete-section-modal.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\inputs\\input-single-select.tsx",[],"C:\\GIT Projects\\TechnoReact\\src\\inputs\\input-richtext-editor.tsx",["260","261","262","263","264","265","266"],{"ruleId":"267","replacedBy":"268"},{"ruleId":"269","replacedBy":"270"},{"ruleId":"271","replacedBy":"272"},{"ruleId":"273","replacedBy":"274"},{"ruleId":"275","replacedBy":"276"},{"ruleId":"277","severity":1,"message":"278","line":54,"column":11,"nodeType":"279","messageId":"280","endLine":54,"endColumn":22},{"ruleId":"277","severity":1,"message":"278","line":82,"column":15,"nodeType":"279","messageId":"280","endLine":82,"endColumn":26},{"ruleId":"277","severity":1,"message":"278","line":95,"column":15,"nodeType":"279","messageId":"280","endLine":95,"endColumn":26},{"ruleId":"277","severity":1,"message":"278","line":107,"column":7,"nodeType":"279","messageId":"280","endLine":107,"endColumn":20},{"ruleId":"277","severity":1,"message":"278","line":133,"column":7,"nodeType":"279","messageId":"280","endLine":133,"endColumn":18},{"ruleId":"277","severity":1,"message":"278","line":60,"column":5,"nodeType":"279","messageId":"280","endLine":60,"endColumn":16},{"ruleId":"277","severity":1,"message":"278","line":69,"column":5,"nodeType":"279","messageId":"280","endLine":69,"endColumn":18},{"ruleId":"277","severity":1,"message":"278","line":73,"column":5,"nodeType":"279","messageId":"280","endLine":73,"endColumn":16},{"ruleId":"277","severity":1,"message":"278","line":77,"column":5,"nodeType":"279","messageId":"280","endLine":77,"endColumn":18},{"ruleId":"277","severity":1,"message":"278","line":81,"column":5,"nodeType":"279","messageId":"280","endLine":81,"endColumn":16},{"ruleId":"267","replacedBy":"281"},{"ruleId":"269","replacedBy":"282"},{"ruleId":"271","replacedBy":"283"},{"ruleId":"273","replacedBy":"284"},{"ruleId":"275","replacedBy":"285"},{"ruleId":"277","severity":1,"message":"278","line":61,"column":9,"nodeType":"279","messageId":"280","endLine":61,"endColumn":20},{"ruleId":"277","severity":1,"message":"278","line":97,"column":9,"nodeType":"279","messageId":"280","endLine":97,"endColumn":20},{"ruleId":"277","severity":1,"message":"278","line":130,"column":9,"nodeType":"279","messageId":"280","endLine":130,"endColumn":20},{"ruleId":"277","severity":1,"message":"278","line":159,"column":9,"nodeType":"279","messageId":"280","endLine":159,"endColumn":20},{"ruleId":"277","severity":1,"message":"278","line":22,"column":9,"nodeType":"279","messageId":"280","endLine":22,"endColumn":20},{"ruleId":"277","severity":1,"message":"278","line":73,"column":5,"nodeType":"279","messageId":"280","endLine":73,"endColumn":16},{"ruleId":"286","severity":2,"message":"287","line":29,"column":12,"nodeType":"288","endLine":29,"endColumn":20},{"ruleId":"289","severity":2,"message":"287","line":29,"column":12,"nodeType":"288","messageId":"290","endLine":29,"endColumn":20},{"ruleId":"289","severity":2,"message":"291","line":32,"column":21,"nodeType":"292","messageId":"290","endLine":32,"endColumn":34},{"ruleId":"277","severity":1,"message":"278","line":42,"column":15,"nodeType":"279","messageId":"280","endLine":42,"endColumn":26},{"ruleId":"277","severity":1,"message":"278","line":48,"column":15,"nodeType":"279","messageId":"280","endLine":48,"endColumn":26},{"ruleId":"277","severity":1,"message":"278","line":51,"column":15,"nodeType":"279","messageId":"280","endLine":51,"endColumn":26},{"ruleId":"277","severity":1,"message":"278","line":54,"column":15,"nodeType":"279","messageId":"280","endLine":54,"endColumn":26},"lines-around-directive",["293"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected",["293"],[],[],[],[],"react/jsx-no-undef","'CKEditor' is not defined.","JSXIdentifier","no-undef","undef","'ClassicEditor' is not defined.","Identifier","padding-line-between-statements"]